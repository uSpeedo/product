"use strict";(self.webpackChunkproduct_docs=self.webpackChunkproduct_docs||[]).push([[7329],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"Golang",sidebar_position:2},s="GO SDK",i={unversionedId:"sms/sdk/package/go",id:"sms/sdk/package/go",title:"GO SDK",description:"1. Preparation",source:"@site/docs/sms/sdk/package/go.md",sourceDirName:"sms/sdk/package",slug:"/sms/sdk/package/go",permalink:"/docs/sms/sdk/package/go",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Golang",sidebar_position:2},sidebar:"sms",previous:{title:"Quick Start",permalink:"/docs/sms/sdk/Introduction-1"}},l={},p=[{value:"1. Preparation",id:"1-preparation",level:2},{value:"1) Obtain API key information",id:"1-obtain-api-key-information",level:3},{value:"2) Apply for SMS template",id:"2-apply-for-sms-template",level:3},{value:"2. SDK",id:"2-sdk",level:2},{value:"1) Install using go get.",id:"1-install-using-go-get",level:3},{value:"2) Install using go mod",id:"2-install-using-go-mod",level:3},{value:"3) Parameter description",id:"3-parameter-description",level:3},{value:"4) Construct API signature",id:"4-construct-api-signature",level:3},{value:"3. Example",id:"3-example",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"go-sdk"},"GO SDK"),(0,r.kt)("h2",{id:"1-preparation"},"1. Preparation"),(0,r.kt)("h3",{id:"1-obtain-api-key-information"},"1) Obtain API key information"),(0,r.kt)("p",null,"Before calling the API, you need to obtain the key information to generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Signature")," signature. You need to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"AccessKeyId")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AccessKeySecret"),", which can be obtained from the console account. For detailed steps on how to obtain them, please refer to: ",(0,r.kt)("a",{parentName:"p",href:"/docs/sms/signature-1"},"How to obtain AccessKeyId and AccessKeySecret"),"."),(0,r.kt)("h3",{id:"2-apply-for-sms-template"},"2) Apply for SMS template"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://console.uspeedo.com/sms/template"},"How to apply for an SMS template")),(0,r.kt)("h2",{id:"2-sdk"},"2. SDK"),(0,r.kt)("h3",{id:"1-install-using-go-get"},"1) Install using go get."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"go get github.com/uSpeedo/usms-sdk-go\n")),(0,r.kt)("p",null,"Note: If you encounter unstable network, you can use a proxy server to speed up the download, such as using GOPROXY acceleration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"export GOPROXY=https://goproxy.io\n")),(0,r.kt)("h3",{id:"2-install-using-go-mod"},"2) Install using go mod"),(0,r.kt)("p",null,"Importing SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import _ "github.com/uSpeedo/usms-sdk-go"\n\n')),(0,r.kt)("p",null,"Afterwards, execute it in the project root directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"go mod init\ngo mod tidy\n")),(0,r.kt)("h3",{id:"3-parameter-description"},"3) Parameter description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Phone number list (PhoneNumbers): supports international and domestic SMS, international SMS uses the format (86)13812345678, and the international telephone area code needs to be added in front of the phone number."),(0,r.kt)("li",{parentName:"ul"},"SMS template ID (TemplateId): For first-time use, you need to apply for a template in the UCloud console. After the template is approved, pass the template ID to this location. "),(0,r.kt)("li",{parentName:"ul"},"SMS template parameter list (TemplateParams): The variables that can be passed in the SMS template. If there are several variables in the template when applying, you need to pass in several. "),(0,r.kt)("li",{parentName:"ul"},"SMS signature (SigContent): For first-time use, you need to apply for a signature in the UCloud console. After the signature is approved, pass the signature to this location. When there is a default signature, this parameter can be left blank.")),(0,r.kt)("h3",{id:"4-construct-api-signature"},"4) Construct API signature"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/sms/signature-1"},"How To Construct Api Signature")),(0,r.kt)("h2",{id:"3-example"},"3. Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "github.com/uSpeedo/usms-sdk-go/private/utils"\n    "time"\n\n    "github.com/uSpeedo/usms-sdk-go/services/usms"\n    "github.com/uSpeedo/usms-sdk-go/um"\n    "github.com/uSpeedo/usms-sdk-go/um/auth"\n    "github.com/uSpeedo/usms-sdk-go/um/config"\n    "github.com/uSpeedo/usms-sdk-go/um/log"\n)\n\nfunc main() {\n    cfg := config.NewConfig()\n    cfg.LogLevel = log.DebugLevel\n\n    credential := auth.NewCredential()\n    credential.AccessKeyId = "..."\n    credential.AccessKeySecret = "..."\n\n    client := usms.NewClient(&cfg, &credential)\n\n    // send request\n    req := client.NewSendBatchUSMSMessageRequest()\n    req.AccountId = um.Int(1)\n    req.Action = um.String("SendBatchUSMSMessage")\n    req.Target = &usms.SendBatchInfo{\n        TemplateId: "...",\n        Targets: []usms.SendBatchTarget{\n            {TemplateParams: []string{"1311"}, Phone: "138xxxx1123"},\n        },\n    }\n    //add header\n    req.SetNonce(utils.RandStr(10))\n    req.SetAccessKeyId(credential.AccessKeyId)\n    req.SetSignature(credential.CreateSign(makeSendParamMap(req)))\n    t, _ := time.ParseDuration("-2m")\n    req.SetTimestamp(time.Now().Add(t).Unix())\n    resp, err := client.SendBatchUSMSMessage(req)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("%+v", resp)\n}\n\nfunc makeSendParamMap(req *usms.SendBatchUSMSMessageRequest) map[string]interface{} {\n    m := make(map[string]interface{}, 0)\n    m["AccountId"] = req.AccountId\n    m["Target"] = req.Target\n    m["Action"] = req.Action\n    return m\n}\n')))}d.isMDXComponent=!0}}]);